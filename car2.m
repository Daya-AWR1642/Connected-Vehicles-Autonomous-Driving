% Set random seed for reproducible results
rndState = rng('default');

% Create scenario using helper
[scenario, egoVehicle, egoVehicle1] = HighwayScenario();

communicated_detections = [];

% Automotive radar system parameters
freq = 77e9; % Hz
rgMax = 50; % m
spMax = 100; % m/s
rcs = 10;    % dBsm

azRes = 4;   % deg
rgRes = 2.5; % m
rrRes = 0.5; % m/s


%% Radar on top of second Car

% Create a forward-looking automotive radar
rdg1 = radarDataGenerator(2, 'No scanning', ...
    'UpdateRate', 10, ...
    'MountingLocation', [3 0 0.2], ...
    'CenterFrequency', freq, ...
    'HasRangeRate', true, ...
    'FieldOfView', [120 2], ...
    'RangeLimits', [0 rgMax], ...
    'RangeRateLimits', [-spMax spMax], ...
    'HasRangeAmbiguities',true, ...
    'MaxUnambiguousRange', rgMax, ...
    'HasRangeRateAmbiguities',true, ...
    'MaxUnambiguousRadialSpeed', spMax, ...
    'ReferenceRange', rgMax, ...
    'ReferenceRCS',rcs, ...
    'AzimuthResolution',azRes, ...
    'RangeResolution',rgRes, ...
    'RangeRateResolution',rrRes, ...
    'TargetReportFormat', 'Detections', ...
    'Profiles',actorProfiles(scenario));

% Create a forward-looking automotive radar
rdg = radarDataGenerator(1, 'No scanning', ...
    'UpdateRate', 10, ...
    'MountingLocation', [3.4 0 0.2], ...
    'CenterFrequency', freq, ...
    'HasRangeRate', true, ...
    'FieldOfView', [70 5], ...
    'RangeLimits', [0 rgMax], ...
    'RangeRateLimits', [-spMax spMax], ...
    'HasRangeAmbiguities',true, ...
    'MaxUnambiguousRange', rgMax, ...
    'HasRangeRateAmbiguities',true, ...
    'MaxUnambiguousRadialSpeed', spMax, ...
    'ReferenceRange', rgMax, ...
    'ReferenceRCS',rcs, ...
    'AzimuthResolution',azRes, ...
    'RangeResolution',rgRes, ...
    'RangeRateResolution',rrRes, ...
    'TargetReportFormat', 'Detections', ...
    'Profiles',actorProfiles(scenario));


%%

% Create bird's eye plot and detection plotter function
[~,detPlotterFcn] = helperSetupBEP(egoVehicle,rdg);
% % Create bird's eye plot and detection plotter function
% [~,detPlotterFcn] = helperSetupBEP(egoVehicle1,rdg1);
title('Targer Detection Scenario');

% Generate raw detections
time = scenario.SimulationTime;
tposes = targetPoses(egoVehicle1);
[dets1,~,config1] = rdg1(tposes,time);



tposes = targetPoses(egoVehicle);
[dets,~,config] = rdg(tposes,time);

%% adding the distance of the target car to combined new data

distance_from_target1 = dets{1}.Measurement(1);  %  with having zero azimuthal

for i = 1:length(dets1)
    dets1{i}.Measurement(1) = dets1{i}.Measurement(1) + distance_from_target1;
end

communicated_detections = [dets;dets1];


% Plot detections
detPlotterFcn(communicated_detections,config);